import requests
import psycopg2
from datetime import datetime, timedelta
import configparser
from pathlib import Path
import sys
import json  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ API

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
def load_config():
    config = configparser.ConfigParser()
    config_path = Path(__file__).parent / 'config.ini'
    if not config_path.exists():
        print(f"‚ùå –§–∞–π–ª config.ini –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        sys.exit(1)
    config.read(config_path)
    return config

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API ---
def get_yandex_direct_report(token, date_from, date_to):
    url = "https://api.direct.yandex.com/json/v5/reports"
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept-Language": "ru",
        "Content-Type": "application/json"
    }

    report_body = {
        "params": {
            "SelectionCriteria": {"DateFrom": date_from, "DateTo": date_to},
            "FieldNames": [
                "Date",
                "CampaignId",
                "CampaignName",
                "AdId",
                "Impressions",
                "Clicks",
                "Cost",
                "Ctr",
                "AvgCpc",
                "Conversions",
                "ConversionRate"
            ],
            "ReportName": "AdPerformanceReport",
            "ReportType": "AD_PERFORMANCE_REPORT",
            "DateRangeType": "CUSTOM_DATE",
            "Format": "TSV",
            "IncludeVAT": "YES",
            "IncludeDiscount": "NO"
        }
    }

    try:
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date_from} - {date_to}...")
        response = requests.post(
            url,
            headers=headers,
            json=report_body,
            timeout=30
        )
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ API
        if response.status_code != 200:
            error_details = response.json().get('error', {})
            print(f"‚ùå –û—à–∏–±–∫–∞ API (–∫–æ–¥ {response.status_code}):")
            print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {error_details.get('error_code', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
            print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_details.get('error_string', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
            print(f"–î–µ—Ç–∞–ª–∏: {error_details.get('error_detail', '–Ω–µ—Ç')}")
            print(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
            return None
            
        return response.text
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
        return None

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ save_to_postgres –∏ main –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

if __name__ == "__main__":
    try:
        config = load_config()
        yandex_token = config['YandexDirect']['ACCESS_TOKEN']
        db_params = {
            'HOST': config['Database']['HOST'],
            'DATABASE': config['Database']['DATABASE'],
            'USER': config['Database']['USER'],
            'PASSWORD': config['Database']['PASSWORD'],
            'PORT': config['Database']['PORT']
        }

        date_to = datetime.now().strftime('%Y-%m-%d')
        date_from = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')

        report_data = get_yandex_direct_report(yandex_token, date_from, date_to)
        if report_data:
            print("üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ. –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫:")
            print("\n".join(report_data.split("\n")[:3]))  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
            save_to_postgres(report_data, db_params)
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –≤—ã—à–µ.")

    except Exception as e:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        print("–ì–æ—Ç–æ–≤–æ")
