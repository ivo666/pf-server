import requests
import psycopg2
from datetime import datetime, timedelta
import configparser
from pathlib import Path
import sys

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.ini"""
    config = configparser.ConfigParser()
    config_path = Path(__file__).parent / 'config.ini'
    
    if not config_path.exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª config.ini –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {config_path}")
        sys.exit(1)
    
    config.read(config_path)
    return config

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API ---
def get_yandex_direct_report(token, date_from, date_to):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç"""
    url = "https://api.direct.yandex.com/json/v5/reports"
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept-Language": "ru",
        "Content-Type": "application/json"
    }

    report_body = {
        "params": {
            "SelectionCriteria": {
                "DateFrom": date_from,
                "DateTo": date_to
            },
            "FieldNames": [
                "Date",
                "CampaignId",
                "CampaignName",
                "Impressions",
                "Clicks",
                "Cost",
                "Ctr",
                "AvgClickPosition",
                "AvgImpressionPosition",
                "Conversions",
                "ConversionRate"
            ],
            "ReportName": "CampaignPerformance",
            "ReportType": "CAMPAIGN_PERFORMANCE_REPORT",
            "DateRangeType": "CUSTOM_DATE",
            "Format": "TSV",
            "IncludeVAT": "YES"
        }
    }

    try:
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ {date_from} - {date_to}...")
        response = requests.post(url, headers=headers, json=report_body, timeout=30)
        response.raise_for_status()
        return response.text
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {str(e)}")
        return None

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –≤ PostgreSQL ---
def save_to_postgres(data, db_params):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL"""
    conn = None
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = psycopg2.connect(
            host=db_params['HOST'],
            database=db_params['DATABASE'],
            user=db_params['USER'],
            password=db_params['PASSWORD'],
            port=db_params['PORT']
        )
        cur = conn.cursor()

        # –ü–∞—Ä—Å–∏–Ω–≥ TSV
        lines = data.strip().split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        insert_query = """
            INSERT INTO row.yandex_direct_stats (
                date, campaign_id, campaign_name, impressions, clicks, cost,
                ctr, avg_click_position, avg_impression_position,
                conversions, conversion_rate
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """
        
        for line in lines:
            if not line.strip():
                continue
                
            values = line.split('\t')
            try:
                cur.execute(insert_query, (
                    values[0],  # Date
                    int(values[1]),  # CampaignId
                    values[2],  # CampaignName
                    int(values[3]),  # Impressions
                    int(values[4]),  # Clicks
                    float(values[5]),  # Cost
                    float(values[6]),  # Ctr
                    float(values[7]),  # AvgClickPosition
                    float(values[8]),  # AvgImpressionPosition
                    int(values[9]),  # Conversions
                    float(values[10])  # ConversionRate
                ))
            except (IndexError, ValueError) as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {line}\n–û—à–∏–±–∫–∞: {str(e)}")
                continue

        conn.commit()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(lines)} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {str(e)}")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()

# --- –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ ---
if __name__ == "__main__":
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç
        yandex_token = config['YandexDirect']['ACCESS_TOKEN']
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
        db_params = {
            'HOST': config['Database']['HOST'],
            'DATABASE': config['Database']['DATABASE'],
            'USER': config['Database']['USER'],
            'PASSWORD': config['Database']['PASSWORD'],
            'PORT': config['Database']['PORT']
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        date_to = datetime.now().strftime('%Y-%m-%d')
        date_from = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        report_data = get_yandex_direct_report(yandex_token, date_from, date_to)
        
        if report_data:
            save_to_postgres(report_data, db_params)
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")

    except Exception as e:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
