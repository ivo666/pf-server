import requests
import psycopg2
import time
import configparser
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
print("üü¢ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    config = configparser.ConfigParser()
    config.read('config.ini')
    
    DB_CONFIG = {
        "host": config['Database']['HOST'],
        "database": config['Database']['DATABASE'],
        "user": config['Database']['USER'],
        "password": config['Database']['PASSWORD'],
        "port": config['Database']['PORT']
    }
    YANDEX_TOKEN = config['YandexDirect']['ACCESS_TOKEN']
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit(1)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
MAX_RETRIES = 3
RETRY_DELAY = 30
DATE = (datetime.now() - timedelta(days=2)).strftime("%Y-%m-%d")  # –í—á–µ—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞

def get_campaign_stats(token, date, attempt=1):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç"""
    print(f"üìä –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –±—É–¥—É—â–∞—è
    if datetime.strptime(date, "%Y-%m-%d") > datetime.now():
        print(f"‚ùå –û—à–∏–±–∫–∞: –¥–∞—Ç–∞ {date} —è–≤–ª—è–µ—Ç—Å—è –±—É–¥—É—â–µ–π")
        return None

    headers = {
        "Authorization": f"Bearer {token}",
        "Accept-Language": "ru",
        "Content-Type": "application/json"
    }

    body = {
        "params": {
            "SelectionCriteria": {"DateFrom": date, "DateTo": date},
            "FieldNames": [
                "Date", "CampaignId", "CampaignName", "AdId",
                "Impressions", "Clicks", "Cost", "AvgClickPosition",
                "Device", "LocationOfPresenceId", "MatchType", "Slot"
            ],
            "ReportName": f"report_{int(time.time())}",
            "ReportType": "AD_PERFORMANCE_REPORT",
            "DateRangeType": "CUSTOM_DATE",
            "Format": "TSV",
            "IncludeVAT": "YES",
            "IncludeDiscount": "NO"
        }
    }

    try:
        response = requests.post(
            "https://api.direct.yandex.com/json/v5/reports",
            headers=headers,
            json=body,
            timeout=120
        )
        
        if response.status_code == 200:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã")
            return response.text
        elif response.status_code == 201:
            if attempt >= MAX_RETRIES:
                print(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({MAX_RETRIES})")
                return None
            print(f"üîÑ –û—Ç—á–µ—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ {RETRY_DELAY} —Å–µ–∫... (–ø–æ–ø—ã—Ç–∫–∞ {attempt} –∏–∑ {MAX_RETRIES})")
            time.sleep(RETRY_DELAY)
            return get_campaign_stats(token, date, attempt+1)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}\n{response.text}")
            return None
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def save_to_db(conn, raw_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
    if not raw_data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return

    lines = [line for line in raw_data.strip().split('\n') 
             if line.strip() and line.split('\t')[0].startswith('20')]
    
    if not lines:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        return

    print(f"üíæ –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {len(lines)} —Å—Ç—Ä–æ–∫...")
    
    with conn.cursor() as cursor:
        success = 0
        for i, line in enumerate(lines, 1):
            parts = line.split('\t')
            if len(parts) < 12:
                continue

            try:
                cursor.execute("""
                INSERT INTO rdl.yd_ad_performance_report (
                    date, campaign_id, campaign_name, ad_id, location_of_presence_id,
                    impressions, clicks, cost, avg_click_position,
                    device, match_type, slot
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (date, campaign_id, campaign_name, ad_id, location_of_presence_id) 
                DO UPDATE SET
                    impressions = EXCLUDED.impressions,
                    clicks = EXCLUDED.clicks,
                    cost = EXCLUDED.cost,
                    avg_click_position = EXCLUDED.avg_click_position
                """, (
                    parts[0],  # date
                    int(parts[1]) if parts[1] else 0,
                    parts[2] if parts[2] else '',
                    int(parts[3]) if parts[3] else 0,
                    int(parts[9]) if parts[9] else 0,
                    int(parts[4]) if parts[4] else 0,
                    int(parts[5]) if parts[5] else 0,
                    float(parts[6].replace(',', '.'))/1000000 if parts[6] and parts[6] != '--' else 0,
                    float(parts[7].replace(',', '.')) if parts[7] and parts[7] != '--' else None,
                    parts[8],
                    parts[10],
                    parts[11]
                ))
                success += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i}: {e}")

        conn.commit()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {success} –∏–∑ {len(lines)} —Å—Ç—Ä–æ–∫")

def main():
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
        conn = psycopg2.connect(**DB_CONFIG)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        raw_data = get_campaign_stats(YANDEX_TOKEN, DATE)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if raw_data:
            save_to_db(conn, raw_data)
            
    except psycopg2.Error as e:
        print(f"üí• –û—à–∏–±–∫–∞ PostgreSQL: {e}")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if 'conn' in locals():
            conn.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    
    print("üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")

if __name__ == "__main__":
    main()
